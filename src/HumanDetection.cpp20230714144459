// -*- C++ -*-
// <rtc-template block="description">
/*!
 * @file  HumanDetection.cpp
 * @brief Human Detection component
 *
 */
// </rtc-template>

#include "HumanDetection.h"

// Module specification
// <rtc-template block="module_spec">
#if RTM_MAJOR_VERSION >= 2
static const char* const humandetection_spec[] =
#else
static const char* humandetection_spec[] =
#endif
  {
    "implementation_id", "HumanDetection",
    "type_name",         "HumanDetection",
    "description",       "Human Detection component",
    "version",           "1.0.0",
    "vendor",            "Hase",
    "category",          "Category",
    "activity_type",     "PERIODIC",
    "kind",              "DataFlowComponent",
    "max_instance",      "1",
    "language",          "C++",
    "lang_type",         "compile",
    ""
  };
// </rtc-template>

/*!
 * @brief constructor
 * @param manager Maneger Object
 */
HumanDetection::HumanDetection(RTC::Manager* manager)
    // <rtc-template block="initializer">
  : RTC::DataFlowComponentBase(manager),
    m_ImageInputIn("ImageInput", m_ImageInput),
    m_TposOut("Tpos", m_Tpos)
    // </rtc-template>
{
}

/*!
 * @brief destructor
 */
HumanDetection::~HumanDetection()
{
}



RTC::ReturnCode_t HumanDetection::onInitialize()
{
  // Registration: InPort/OutPort/Service
  // <rtc-template block="registration">
  // Set InPort buffers
  addInPort("ImageInput", m_ImageInputIn);
  
  // Set OutPort buffer
  addOutPort("Tpos", m_TposOut);

  
  // Set service provider to Ports
  
  // Set service consumers to Ports
  
  // Set CORBA Service Ports
  
  // </rtc-template>

  // <rtc-template block="bind_config">
  // </rtc-template>

  
  return RTC::RTC_OK;
}

/*
RTC::ReturnCode_t HumanDetection::onFinalize()
{
  return RTC::RTC_OK;
}
*/


//RTC::ReturnCode_t HumanDetection::onStartup(RTC::UniqueId /*ec_id*/)
//{
//  return RTC::RTC_OK;
//}


//RTC::ReturnCode_t HumanDetection::onShutdown(RTC::UniqueId /*ec_id*/)
//{
//  return RTC::RTC_OK;
//}


RTC::ReturnCode_t HumanDetection::onActivated(RTC::UniqueId /*ec_id*/)
{
  return RTC::RTC_OK;
}


//RTC::ReturnCode_t HumanDetection::onDeactivated(RTC::UniqueId /*ec_id*/)
//{
//  return RTC::RTC_OK;
//}


RTC::ReturnCode_t HumanDetection::onExecute(RTC::UniqueId /*ec_id*/)
{
  return RTC::RTC_OK;
}


//RTC::ReturnCode_t HumanDetection::onAborting(RTC::UniqueId /*ec_id*/)
//{
//  return RTC::RTC_OK;
//}


//RTC::ReturnCode_t HumanDetection::onError(RTC::UniqueId /*ec_id*/)
//{
//  return RTC::RTC_OK;
//}


//RTC::ReturnCode_t HumanDetection::onReset(RTC::UniqueId /*ec_id*/)
//{
//  return RTC::RTC_OK;
//}


//RTC::ReturnCode_t HumanDetection::onStateUpdate(RTC::UniqueId /*ec_id*/)
//{
//  return RTC::RTC_OK;
//}


//RTC::ReturnCode_t HumanDetection::onRateChanged(RTC::UniqueId /*ec_id*/)
//{
//  return RTC::RTC_OK;
//}



extern "C"
{
 
  void HumanDetectionInit(RTC::Manager* manager)
  {
    coil::Properties profile(humandetection_spec);
    manager->registerFactory(profile,
                             RTC::Create<HumanDetection>,
                             RTC::Delete<HumanDetection>);
  }
  
}
